- name: Deploy and run Telegram bot
  hosts: tg-bot
  become: yes
  become_method: sudo
  vars:
    repo_url: "https://github.com/eriolnik/PTSTART-2024_DevOps"
    bot_dest: "/home/{{ ansible_user }}/tg-bot1"
    requirements_file: "{{ bot_dest }}/requirements.txt"
    branch: "master"
  tasks:
    - name: Install required packages
      apt:
        name:
          - python3
          - python3-venv
          - python3-pip
          - git
        state: present
    
    - name: Clone Telegram bot repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ bot_dest }}"
        version: "{{ branch }}"
      
    - name: Install Python requirements
      pip:
        requirements: "{{ requirements_file }}"
               
    - name: Copy .env file to bot directory
      copy:
        src: .env
        dest: "{{ bot_dest }}/.env"

    - name: Ensure the bot directory is writable
      file:
        path: "{{ bot_dest }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Running bot
      become: false
      shell: |
        cd {{ bot_dest }}
        nohup python3 bot.py &


- name: Install and configure PostgreSQL master
  hosts: db
  become: yes
  become_method: sudo
  tasks:       
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install PostgreSQL
      apt:
        name:
          - postgresql-14
          - postgresql-client-14
          - postgresql-contrib-14
        state: present

    - name: Start PostgreSQL service
      systemd:
        name: postgresql
        enabled: yes
        state: started
        
    - name: Create tables
      become_user: postgres
      postgresql_db:
        name: "{{ DB_DATABASE }}"
        state: present       
         
    - name: Create database user
      become_user: postgres
      postgresql_user:
        name: "{{ DB_USER }}"
        password: "{{ DB_PASSWORD }}"
        db: "{{ DB_DATABASE }}"
        priv: "ALL"
        state: present     
     
    - name: Create replication user
      become_user: postgres
      postgresql_user:
        name: "{{ DB_REPL_USER }}"
        password: "{{ DB_REPL_PASSWORD }}"
        role_attr_flags: SUPERUSER,REPLICATION  

    - name: Create phone table
      become_user: postgres
      postgresql_query:
        db: "{{ DB_DATABASE }}"
        query: |
          CREATE TABLE IF NOT EXISTS phone (
              phoneID SERIAL PRIMARY KEY,
              phone VARCHAR(255)
          );
          INSERT INTO phone (phone) VALUES ('89234567890');

    - name: Create email table
      become_user: postgres
      postgresql_query:
        db: "{{ DB_DATABASE }}"
        query: |
          CREATE TABLE IF NOT EXISTS mail (
              mailID SERIAL PRIMARY KEY,
              mail VARCHAR(255)
          );
          INSERT INTO mail (mail) VALUES ('test1@example.com');

    - name: Copy PostgreSQL configuration files with jinja2
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: "pg_hba.conf.j2", dest: "/etc/postgresql/14/main/pg_hba.conf" }
        - { src: "config-postgresql.j2", dest: "/etc/postgresql/14/main/postgresql.conf" }
    
    - name: Create archive directory
      become: yes
      file:
        path: /oracle/pg_data/archive
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'

    - name: Restart PostgreSQL service
      systemd:
        name: postgresql
        state: restarted

    - name: Change permissions on PostgreSQL log files
      become: yes
      file:
        path: /var/log/postgresql
        owner: postgres
        group: postgres
        mode: '0755'
        recurse: yes
     
- name: Install PostgreSQL slave
  hosts: db_repl
  become: yes
  tasks:
 
  
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install PostgreSQL
      apt:
        name:
          - postgresql-14
          - postgresql-client-14
          - postgresql-contrib-14
        state: present

- name: Configure replication on slave
  hosts: db_repl
  become: yes
  tasks:
    - name: Stop PostgreSQL service on db_repl
      systemd:
        name: postgresql
        state: stopped

    - name: Clean up data directory on db_repl
      become_user: postgres
      shell: rm -rf /var/lib/postgresql/14/main/*

    - name: Create archive directory
      become: yes
      file:
        path: /oracle/pg_data/archive
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'


    - name: Run pg_basebackup on db_repl
      become_user: postgres
      shell: |
        PGPASSWORD={{ DB_REPL_PASSWORD }} pg_basebackup -R -h {{ hostvars['db']['ansible_host'] }} -U {{ DB_REPL_USER }} -p {{ DB_PORT }} -D /var/lib/postgresql/14/main/

    - name: Start PostgreSQL service on db_repl
      systemd:
        name: postgresql
        state: started
